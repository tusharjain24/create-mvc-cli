#!/usr/bin/env bash
set -euo pipefail

# ----------------------------
# Colors
# ----------------------------
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# ----------------------------
# Help / Usage
# ----------------------------
show_help() {
  echo -e "${BLUE}üöÄ create-mvc - Generate a backend project with MVC structure${NC}"
  echo ""
  echo "Usage:"
  echo "  create-mvc --lang <node|python|java> <project-name>"
  echo ""
  echo "Options:"
  echo "  --lang <node|python|java>   Specify backend language"
  echo "  --help                      Show this help message"
  echo ""
  echo "Examples:"
  echo "  create-mvc --lang node my-backend"
  echo "  create-mvc --lang python my-api"
  echo "  create-mvc --lang java my-service"
  echo ""
}

# ----------------------------
# Parse Arguments
# ----------------------------
if [[ "$1" == "--help" || $# -lt 3 ]]; then
  show_help
  exit 0
fi

if [[ "$1" != "--lang" ]]; then
  echo -e "${RED}‚ùå Missing or invalid flag. Use --lang${NC}"
  show_help
  exit 1
fi

LANG=$2
PROJECT_NAME=$3

# ----------------------------
# Check project folder
# ----------------------------
if [[ -d "$PROJECT_NAME" ]]; then
  echo -e "${RED}‚ùå Directory '$PROJECT_NAME' already exists. Choose another name.${NC}"
  exit 1
fi

# ----------------------------
# Node.js + Express
# ----------------------------
setup_node() {
  if ! command -v node >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Node.js is not installed. Please install it first.${NC}"
    exit 1
  fi
  if ! command -v npm >/dev/null 2>&1; then
    echo -e "${RED}‚ùå npm is not installed or not in PATH.${NC}"
    exit 1
  fi

  echo -e "${YELLOW}üìÇ Creating Node.js + Express MVC project in $PROJECT_NAME${NC}"

  mkdir -p "$PROJECT_NAME"
  cd "$PROJECT_NAME"

  # Step 1: Create src folder and subfolders
  mkdir -p src
  dirs=(controllers models routes services db middlewares utils)
  for d in "${dirs[@]}"; do
    mkdir -p "src/$d"
    touch "src/$d/.gitkeep"
  done

  # Core files
  touch src/index.js src/app.js src/constants.js

  # Step 2: Create common config files
  cat <<EOL > .gitignore
node_modules
.env
.DS_Store
dist
coverage
EOL

  touch .prettierrc .prettierignore .env.example .env

  # Step 3: Initialize Node.js and install dependencies
  echo -e "${YELLOW}üì¶ Initializing npm and installing Express...${NC}"
  npm init -y >/dev/null 2>&1
  npm install express >/dev/null 2>&1

  # Step 4: Add start script safely
  if command -v jq >/dev/null 2>&1; then
    jq '.scripts.start="node server.js"' package.json > tmp.json && mv tmp.json package.json
  else
    sed -i '' 's/"scripts": {/"scripts": { "start": "node server.js",/' package.json || true
  fi

  echo -e "${GREEN}‚úÖ Node.js MVC project '$PROJECT_NAME' created successfully!${NC}"
  echo -e "üëâ cd $PROJECT_NAME && npm start"
}

# ----------------------------
# Python + FastAPI (pip)
# ----------------------------
setup_fastapi_pip() {
  if ! command -v python3 >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Python3 is not installed.${NC}"
    exit 1
  fi
  if ! command -v pip >/dev/null 2>&1; then
    echo -e "${RED}‚ùå pip is not installed.${NC}"
    exit 1
  fi

  echo -e "${YELLOW}üìÇ Creating FastAPI (pip) MVC project in $PROJECT_NAME${NC}"

  mkdir -p "$PROJECT_NAME/app"
  cd "$PROJECT_NAME"

  echo "fastapi" > requirements.txt
  echo "uvicorn[standard]" >> requirements.txt

  dirs=(api models schemas services core middlewares)
  for d in "${dirs[@]}"; do
    mkdir -p "app/$d"
    touch "app/$d/__init__.py"
  done
  mkdir -p tests
  touch tests/__init__.py app/__init__.py

  # main.py
  cat <<EOL > app/main.py
from fastapi import FastAPI
app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "Hello World from FastAPI (pip) MVC setup!"}
EOL

  # config.py
  cat <<EOL > app/core/config.py
PROJECT_NAME = "FastAPI MVC Project"
VERSION = "0.1.0"
EOL

  echo -e "${GREEN}‚úÖ FastAPI (pip) project '$PROJECT_NAME' created!${NC}"
  echo -e "üëâ cd $PROJECT_NAME && pip install -r requirements.txt && uvicorn app.main:app --reload"
}

# ----------------------------
# Python + FastAPI (uv)
# ----------------------------
setup_fastapi_uv() {
  if ! command -v uv >/dev/null 2>&1; then
    echo -e "${RED}‚ùå uv CLI not installed. Please install uv first.${NC}"
    exit 1
  fi

  echo -e "${YELLOW}üìÇ Creating FastAPI (uv) MVC project in $PROJECT_NAME${NC}"

  uv init "$PROJECT_NAME" >/dev/null 2>&1
  cd "$PROJECT_NAME"
  uv add fastapi uvicorn >/dev/null 2>&1

  dirs=(api models schemas services core middlewares)
  for d in "${dirs[@]}"; do
    mkdir -p "app/$d"
    touch "app/$d/__init__.py"
  done
  mkdir -p tests
  touch tests/__init__.py app/__init__.py

  # main.py
  cat <<EOL > app/main.py
from fastapi import FastAPI
app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "Hello World from FastAPI (uv) MVC setup!"}
EOL

  # config.py
  cat <<EOL > app/core/config.py
PROJECT_NAME = "FastAPI MVC Project"
VERSION = "0.1.0"
EOL

  echo -e "${GREEN}‚úÖ FastAPI (uv) project '$PROJECT_NAME' created!${NC}"
  echo -e "üëâ cd $PROJECT_NAME && uv run uvicorn app.main:app --reload"
}

# ----------------------------
# Dispatcher
# ----------------------------
case $LANG in
  node) setup_node ;;
  python)
    echo -e "${YELLOW}üêç Python backend detected.${NC}"
    echo -e "${BLUE}üëâ Choose a framework option:${NC}"
    echo "1) FastAPI (pip)"
    echo "2) FastAPI (uv)"
    read -r choice
    case $choice in
      1) setup_fastapi_pip ;;
      2) setup_fastapi_uv ;;
      *) echo -e "${RED}‚ùå Invalid choice${NC}"; exit 1 ;;
    esac
    ;;
  java) echo -e "${RED}‚òï Java scaffolding not implemented yet.${NC}" ;;
  *) echo -e "${RED}‚ùå Unsupported language: $LANG${NC}"; show_help; exit 1 ;;
esac
